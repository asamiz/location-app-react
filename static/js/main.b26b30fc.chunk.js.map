{"version":3,"sources":["common/enums.ts","components/TitledSelector/index.tsx","components/LocationForm/index.tsx","utils/reshapData.ts","services/client.ts","services/services.ts","pages/Home/reducer.ts","pages/Home/index.tsx","App/index.tsx","index.tsx"],"names":["TYPES","customStyles","option","provided","textAlign","container","width","TitledSelector","title","data","placeholder","onChangeItem","disabled","className","options","styles","isDisabled","onChange","item","LocationForm","countries","cities","areas","onSelectCountry","onSelectCity","length","reshapeDropdownData","reshapedData","map","reshapedObject","label","attributes","name","value","id","push","a","instance","axios","create","defaults","baseURL","headers","post","timeout","interceptors","response","use","error","Promise","reject","getCountries","client","get","console","log","getCountryCities","getCitiesAreas","country","city","HomeReducer","initialState","action","type","SELECTED_COUNTRY","selectedCountry","payload","COUNTRIES_LOADING","countriesLoading","GET_COUNTRIES","UPDATE_CITIES","UPDATE_AREAS","override","css","Home","useReducer","dispatch","useEffect","onLoad","useCallback","size","loading","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.b26b30fc.chunk.js","sourcesContent":["/** ENUMS */\nexport enum TYPES {\n  SELECTED_COUNTRY = \"SELECTED_COUNTRY\",\n  UPDATE_CITIES = \"UPDATE_CITIES \",\n  UPDATE_AREAS = \"UPDATE_AREAS\",\n  GET_COUNTRIES = \"GET_COUNTRIES\",\n  COUNTRIES_LOADING = \"COUNTRIES_LOADING\",\n}\n","import React from \"react\";\nimport Select, { Styles, ValueType } from \"react-select\";\nimport { DropDownData } from \"../../common/types\";\nimport \"./styles.css\";\n\ninterface Props {\n  title: string;\n  data: DropDownData[] | undefined;\n  placeholder: string;\n  disabled?: boolean;\n  onChangeItem?: (item: ValueType<DropDownData>) => void;\n}\n\n// Selector custom styles\nconst customStyles: Partial<Styles> = {\n  option: (provided) => ({\n    ...provided,\n    textAlign: \"left\",\n  }),\n  container: (provided) => ({\n    ...provided,\n    width: \"50%\",\n    \"@media only screen and (max-width: 600px)\": {\n      width: \"100%\",\n    },\n  }),\n};\n\nexport const TitledSelector = ({\n  title,\n  data,\n  placeholder,\n  onChangeItem,\n  disabled,\n}: Props) => {\n  return (\n    <div>\n      <h3 className={\"title\"}>{title}</h3>\n      <Select\n        options={data}\n        placeholder={placeholder}\n        styles={customStyles}\n        isDisabled={disabled}\n        onChange={(item) => onChangeItem && onChangeItem(item)}\n      />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { ValueType } from \"react-select\";\nimport { DropDownData } from \"../../common/types\";\nimport { TitledSelector } from \"../TitledSelector\";\nimport \"./styles.css\";\n\ninterface Props {\n  countries?: DropDownData[];\n  cities?: DropDownData[] | undefined;\n  areas?: DropDownData[] | undefined;\n  onSelectCountry: (item: ValueType<DropDownData>) => void;\n  onSelectCity: (item: ValueType<DropDownData>) => void;\n}\n\nexport const LocationForm = ({\n  countries,\n  cities,\n  areas,\n  onSelectCountry,\n  onSelectCity,\n}: Props) => {\n  return (\n    <div>\n      <h2 className={\"header\"}>{\"Location\"}</h2>\n      <TitledSelector\n        data={countries}\n        title={\"Country *\"}\n        placeholder={\"Please select your country ..\"}\n        onChangeItem={(item) => onSelectCountry && onSelectCountry(item)}\n      />\n      {cities?.length !== 0 && (\n        <TitledSelector\n          data={cities}\n          title={\"City *\"}\n          disabled={cities?.length === 0}\n          placeholder={\"Please select your city ..\"}\n          onChangeItem={(item) => onSelectCity && onSelectCity(item)}\n        />\n      )}\n      {areas?.length !== 0 && (\n        <TitledSelector\n          data={areas}\n          title={\"Area (Optional)\"}\n          placeholder={\"Please select your area ..\"}\n        />\n      )}\n    </div>\n  );\n};\n","import { DropDownData } from \"../common/types\";\n\nexport function reshapeDropdownData(data: any): DropDownData[] {\n  let reshapedData: DropDownData[] = [];\n  data.map((item: any) => {\n    let reshapedObject: DropDownData = {\n      label: item.attributes.name,\n      value: item.id,\n    };\n    reshapedData.push(reshapedObject);\n    return null;\n  });\n  return reshapedData;\n}\n","import axios from \"axios\";\n\nexport const baseURL: string = \"http://46.101.108.59/api\";\n\nexport default async () => {\n  const instance = axios.create();\n  instance.defaults.baseURL = baseURL;\n  instance.defaults.headers.post[\"Content-Type\"] = \"application/json\";\n  instance.defaults.timeout = 10000;\n\n  // Here we can add any interceptor so that you can keep track of the request.\n  instance.interceptors.response.use(\n    (response) => {\n      return response.data;\n    },\n    (error) => Promise.reject(error)\n  );\n  return instance;\n};\n","import { DropDownData } from \"../common/types\";\nimport { reshapeDropdownData } from \"../utils/reshapData\";\nimport client from \"./client\";\n\nexport async function getCountries(): Promise<DropDownData[] | undefined> {\n  try {\n    const response = await (await client()).get(`/countries`);\n    if (response) {\n      return reshapeDropdownData(response.data);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getCountryCities(\n  value: any\n): Promise<DropDownData[] | undefined> {\n  try {\n    const response = await (await client()).get(\n      `/country/${value?.value}/city`\n    );\n    if (response) {\n      return reshapeDropdownData(response.data);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport async function getCitiesAreas(\n  country: DropDownData,\n  city: any\n): Promise<DropDownData[] | undefined> {\n  try {\n    const response = await (await client()).get(\n      `/country/${country.value}/city/${city?.value}/area`\n    );\n    if (response) {\n      return reshapeDropdownData(response.data);\n    }\n  } catch (error) {\n    console.log(error);\n  }\n}\n","import { IHomeAction, IHomeState } from \"../../common/interfaces\";\nimport { TYPES } from \"../../common/enums\";\n\nexport const HomeReducer = (initialState: IHomeState, action: IHomeAction) => {\n  switch (action.type) {\n    case TYPES.SELECTED_COUNTRY:\n      return {\n        ...initialState,\n        selectedCountry: action.payload,\n        areas: [],\n        cities: [],\n      };\n    case TYPES.COUNTRIES_LOADING:\n      return { ...initialState, countriesLoading: action.payload };\n    case TYPES.GET_COUNTRIES:\n      return { ...initialState, countries: action.payload };\n    case TYPES.UPDATE_CITIES:\n      return { ...initialState, cities: action.payload };\n    case TYPES.UPDATE_AREAS:\n      return { ...initialState, areas: action.payload };\n    default:\n      return initialState;\n  }\n};\n","import React, { useCallback, useEffect, useReducer } from \"react\";\nimport { css } from \"@emotion/core\";\nimport { ValueType } from \"react-select\";\nimport { ClipLoader } from \"react-spinners\";\nimport { TYPES } from \"../../common/enums\";\nimport { IHomeState } from \"../../common/interfaces\";\nimport { DropDownData } from \"../../common/types\";\nimport { LocationForm } from \"../../components\";\nimport { getCitiesAreas, getCountries, getCountryCities } from \"../../services\";\nimport { HomeReducer } from \"./reducer\";\nimport \"./styles.css\";\n\nconst initialState: IHomeState = {\n  selectedCountry: {},\n  cities: [],\n  areas: [],\n  countries: [],\n  countriesLoading: true,\n};\n\n// Loader Styles\nconst override = css`\n  display: block;\n  margin: 0 auto;\n  border-color: red;\n  margin-top: 200px;\n`;\n\nconst Home = () => {\n  const [\n    { cities, areas, selectedCountry, countriesLoading, countries },\n    dispatch,\n  ] = useReducer(HomeReducer, initialState);\n\n  useEffect(() => {\n    onLoad();\n    dispatch({ type: TYPES.COUNTRIES_LOADING, payload: false });\n  }, []);\n\n  // Cities API calling\n  const onSelectCountry = useCallback(async (item: ValueType<DropDownData>) => {\n    dispatch({ type: TYPES.SELECTED_COUNTRY, payload: item });\n    const response = await getCountryCities(item);\n    dispatch({ type: TYPES.UPDATE_CITIES, payload: response });\n  }, []);\n\n  // Areas API calling\n  const onSelectCity = useCallback(\n    async (item: any) => {\n      dispatch({ type: TYPES.UPDATE_AREAS, payload: [] });\n      // Make the request only if the country is Egypt\n      if (selectedCountry?.value === \"56\") {\n        const response = await getCitiesAreas(selectedCountry, item);\n        dispatch({ type: TYPES.UPDATE_AREAS, payload: response });\n      } else {\n        dispatch({ type: TYPES.UPDATE_AREAS, payload: [] });\n      }\n    },\n    [selectedCountry]\n  );\n\n  // Countries API calling (Called after rendering in useEffect)\n  const onLoad = async () => {\n    const response = await getCountries();\n    dispatch({ type: TYPES.GET_COUNTRIES, payload: response });\n  };\n\n  return countriesLoading ? (\n    <ClipLoader size={90} loading={countriesLoading} css={override} />\n  ) : (\n    <div className={\"container\"}>\n      <LocationForm\n        countries={countries}\n        cities={cities}\n        areas={areas}\n        onSelectCity={(item: ValueType<DropDownData>) => onSelectCity(item)}\n        onSelectCountry={(item: ValueType<DropDownData>) =>\n          onSelectCountry(item)\n        }\n      />\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { HomePage } from \"../pages\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}